import {
    getTokens as getTokensFromServer,
    getSubscriptions,
    addSubscription,
    removeSubscription
} from 'api'
import { getEpisodes } from '../actions/episodesActions'

export const FETCH_TOKENS = 'FETCH_TOKENS';
export const SUBSCRIBE = 'SUBSCRIBE';
export const UNSUBSCRIBE = 'UNSUBSCRIBE';

export function fetchTokensRequest() {
    return {
        type: FETCH_TOKENS
    };
};

export function fetchTokensSuccess(data) {
    return {
        type: FETCH_TOKENS,
        status: 'success',
        data: data
    };
};

export function fetchTokensFailure(message) {
    return {
        type: FETCH_TOKENS,
        status: 'error',
        message: message
    };
};

export function subscribeRequest(tokenId) {
    return {
        type: SUBSCRIBE,
        tokenId: tokenId
    };
};

export function subscribeRequestSuccess(data) {
    return {
        type: SUBSCRIBE,
        status: 'success'
    };
};

export function subscribeRequestFailure(error) {
    return {
        type: SUBSCRIBE,
        status: 'error',
        error: error
    }
}

export function unsubscribeRequest(tokenId) {
    return {
        type: UNSUBSCRIBE,
        tokenId: tokenId
    };
};

export function unsubscribeSuccess(data) {
    return {
        type: UNSUBSCRIBE,
        status: 'success',
        subscription: data
    };
};

export function unsubscribeFailure(error) {
    return {
        type: UNSUBSCRIBE,
        status: 'error',
        error: error
    };
};

export function getTokens() {
    return dispatch => {
        dispatch(fetchTokensRequest());

        Promise.all([getTokensFromServer(), getSubscriptions()])
            .then(data => {
                const [ tokens, subscriptions ] = data;
                return tokens.map(token => ({
                    ...token,
                    subscribed: subscriptions.find(
                        subscription => subscription.token.id === token.id) ? true : false
                }))
            })
            .then(tokens => dispatch(fetchTokensSuccess(tokens)))
            .catch(error => dispatch(fetchTokensFailure(error)));
    }
}

export function subscribe(tokenId) {
    return dispatch => {
        dispatch(subscribeRequest(tokenId));

        return addSubscription({id: tokenId})
            .then(() => dispatch(subscribeRequestSuccess()))
            .then(() => dispatch(getEpisodes(10, 0, true)))
            .catch(error => dispatch(subscribeRequestFailure(error)));
    };
};

export function unsubscribe(tokenId) {
    return dispatch => {
        dispatch(unsubscribeRequest(tokenId));

        return removeSubscription({id: tokenId})
            .then(() => dispatch(unsubscribeSuccess()))
            .then(() => dispatch(getEpisodes(10, 0, true)))
            .catch(error => dispatch(unsubscribeFailure(error)));
    };
};
