import api from '../api/auth';
import { pushState } from 'redux-router';
import { getEpisodes } from '../actions/episodesActions';
import store from  '../store';
import { removeFavouriteEpisodesFromStore } from './episodesActions';
import { getTokens } from './subscriptions';

/*
 * action types
 */

export const INVALIDATE_PROFILE = 'INVALIDATE_PROFILE';
export const AUTH_PROFILE = 'AUTH_PROFILE';
export const AUTH_LOGIN = 'AUTH_LOGIN';
export const AUTH_LOGOUT = 'AUTH_LOGOUT';
export const AUTH_REGISTER = 'AUTH_REGISTER';
export const CLEAR_STORE = 'CLEAR_STORE';

/*
 * action creators
 */

export function authRegisterRequest() {
  return {
    type: AUTH_REGISTER,
  };
};

export function authRegisterSuccess(message) {
  return {
    type: AUTH_REGISTER,
    status: 'success',
    message: message,
  };
};

export function authRegisterFailure(error) {
  return {
    type: AUTH_REGISTER,
    status: 'error',
    error: error,
  };
};

export function authLoginRequest() {
  return {
    type: AUTH_LOGIN,
  };
};

export function authLoginSuccess(profile) {
  return {
    type: AUTH_LOGIN,
    status: 'success',
    profile: profile,
  };
};

export function authLoginFailure(status, error) {
  return {
    type: AUTH_LOGIN,
    status: status,
    error: error,
  };
}

export function authLogoutRequest() {
  return {
    type: AUTH_LOGOUT,
  };
}

export function getProfile() {
  return dispatch => api.getProfile()
    .then(profile => dispatch(authLoginSuccess(profile)))
    .then(() => dispatch(getTokens()))
    .then(() => dispatch(getEpisodes(10, 0, true)));
}

export function login(credentials) {
  return dispatch => {
    dispatch(authLoginRequest());

    return api.login(credentials)
      .then(profile => dispatch(authLoginSuccess(profile)))
      .then(() => dispatch(pushState(null, '/auth/profile')))
      .then(() => dispatch(getEpisodes(10, 0, true)))
      .catch((status, error) => dispatch(authLoginFailure(status, error)));
  };
}

export function register(credentials) {
  return dispatch => {
    dispatch(authRegisterRequest());

    return api.register(credentials)
      .then(message => dispatch(authRegisterSuccess(message)))
      .then(() => dispatch(login(credentials)))
      .catch(error => dispatch(authRegisterFailure(error)));
  };
}

export function logout() {
  return dispatch => {
    dispatch(authLogoutRequest());

    return api.logout()
      .then(profile => dispatch(authLoginSuccess(profile)))
      .catch((status, error) => dispatch(authLoginFailure(status, error)))
      .then(() => dispatch(pushState(null, '/auth/login')))
      .then(() => dispatch(removeFavouriteEpisodesFromStore()));
  };
}
