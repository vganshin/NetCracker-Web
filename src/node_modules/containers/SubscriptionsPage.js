import React from 'react';
import { connect } from 'react-redux';
import Profile from 'components/Profile';
import LoginForm from 'components/LoginForm';
import { login } from 'actions/authActions';
import { pushState } from 'redux-router';
import TokenList from 'components/TokenList';
import { subscribe, unsubscribe, getTokens } from 'actions/subscriptions';

@connect(state => ({
  subscribed: state.subscriptions.tokens.filter(token => token.subscribed),
  unsubscribed: state.subscriptions.tokens.filter(token => !token.subscribed)
}))
export default class SubscriptionsPage extends React.Component {
  constructor() {
    super();
    this.state = {
      pattern: '',
    };
  }

  componentWillMount() {
    this.props.dispatch(getTokens());
  }

  changePattern() {
    const pattern = this.refs.pattern.value.trim().toLowerCase();
    this.setState({
      pattern: pattern,
    });
  }

  render() {
    const { dispatch, subscribed, unsubscribed } = this.props;
    const { pattern } = this.state;

    const godFilter = subscription => (subscription.serial.title.toLowerCase().indexOf(pattern) + 1) || (subscription.studio.name.toLowerCase().indexOf(pattern) + 1);

    const subscribedFiltered = subscribed.filter(godFilter);
    const unsubscribedFiltered = unsubscribed.filter(godFilter);

    return (
      <div>
        <input type='text' ref='pattern' id='pattern' onChange={() => this.changePattern()} />
        <TokenList tokens={subscribedFiltered} submit={tokenId => dispatch(unsubscribe(tokenId))} pattern={pattern} />
        <TokenList tokens={unsubscribedFiltered} submit={tokenId => dispatch(subscribe(tokenId))} pattern={pattern} />
      </div>
    );
  }
}
